{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["screensize","bird_height","degrees_to_radians","degrees","Math","PI","Bird","props","transform","x","y","heading","points","bird_width","fill","App","useState","Array","keys","map","i","id","floor","random","flock","setFlock","requestRef","useRef","thenRef","Date","now","animate","time","current","requestAnimationFrame","currentFlock","averages","bird","filter","nb","bird_nbs","length","totals","reduce","acc","updated","index","newHeading","average","deltaHeading","min","max","sin","cos","wrap","pos","step","useEffect","cancelAnimationFrame","viewBox","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f7e246e.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useRef, useEffect } from \"react\";\n\nconst sense_radius = 100;\nconst screensize = 400;\nconst turn_factor = 0.01;\nconst bird_height = 24;\nconst bird_width = 12;\n\nfunction degrees_to_radians(degrees) {\n  var pi = Math.PI;\n  return degrees * (pi / 180);\n}\n\nfunction Bird(props) {\n  return (\n    <g transform={`translate(${props.x} ${props.y}) rotate(${props.heading})`}>\n      <polygon\n        points={`${-(bird_width / 2)},${bird_height / 2} \n        0,${-(bird_height / 2)} \n        ${bird_width / 2},${bird_height / 2}`}\n        fill=\"#999\"\n      />\n    </g>\n  );\n}\n\nfunction App() {\n  const randomBird = (i) => {\n    return {\n      id: i,\n      x: Math.floor(Math.random() * screensize),\n      y: Math.floor(Math.random() * screensize),\n      heading: Math.floor(Math.random() * 360),\n    };\n  };\n\n  const [flock, setFlock] = useState([...Array(30).keys()].map(randomBird));\n\n  const requestRef = useRef();\n  const thenRef = useRef(Date.now());\n  function step(current) {\n    // get neighbours\n    const nbs = current.map((bird) => {\n      return current.filter((nb) => {\n        if (nb.id === bird.id) {\n          return false;\n        }\n        return (bird.x - nb.x) ** 2 + (bird.y - nb.y) ** 2 <= sense_radius ** 2;\n      });\n    });\n\n    // average position and heading of neighbours\n    const averages = nbs.map((bird_nbs) => {\n      if (bird_nbs.length > 0) {\n        const totals = bird_nbs.reduce(\n          (acc, nb) => {\n            return {\n              x: acc.x + nb.x,\n              y: acc.y + nb.y,\n              heading: acc.heading + nb.heading,\n            };\n          },\n          { x: 0, y: 0, heading: 0 }\n        );\n        return {\n          x: totals.x / bird_nbs.length,\n          y: totals.y / bird_nbs.length,\n          heading: totals.heading / bird_nbs.length,\n        };\n      } else {\n        return null;\n      }\n    });\n\n    // update headings trying to achieve alignment with neighbours\n    const updated = current.map((bird, index) => {\n      const average = averages[index];\n      if (!average) {\n        return bird;\n      }\n      let newHeading;\n      // Alignment\n      let deltaHeading = turn_factor * (bird.heading - average.heading);\n      deltaHeading = Math.min(3, Math.max(-3, deltaHeading));\n      newHeading = bird.heading + deltaHeading;\n\n      return {\n        id: bird.id,\n        x: bird.x + Math.sin(degrees_to_radians(bird.heading)),\n        y: bird.y - Math.cos(degrees_to_radians(bird.heading)),\n        heading: newHeading % 360,\n      };\n    });\n\n    const wrap = (pos, screensize) => {\n      if (pos < 0 - bird_height) {\n        return screensize + bird_height;\n      }\n      if (pos > screensize + bird_height) {\n        return 0;\n      }\n      return pos;\n    };\n\n    // calculate new positions\n    const newFlock = updated.map((bird) => {\n      return {\n        id: bird.id,\n        x: wrap(\n          bird.x + Math.sin(degrees_to_radians(bird.heading)),\n          screensize\n        ),\n        y: wrap(\n          bird.y - Math.cos(degrees_to_radians(bird.heading)),\n          screensize\n        ),\n        heading: bird.heading,\n      };\n    });\n\n    return newFlock;\n  }\n\n  const animate = (time) => {\n    requestRef.current = requestAnimationFrame(animate);\n    const now = Date.now();\n    const elapsed = now - thenRef.current;\n    if (elapsed > 1000 / 30) {\n      setFlock((currentFlock) => step(currentFlock));\n    }\n  };\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <svg id=\"cvs\" viewBox={`0 0 ${screensize} ${screensize}`}>\n        <rect\n          x=\"0\"\n          width={screensize}\n          y=\"0\"\n          height={screensize}\n          fill=\"#eee\"\n        ></rect>\n        {flock.map((bird, index) => {\n          return (\n            <Bird\n              key={index}\n              x={bird.x}\n              y={bird.y}\n              heading={bird.heading}\n            ></Bird>\n          );\n        })}\n      </svg>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}